pipeline {
    agent {
        label'master'
    }
    parameters {
        choice(name: 'aws_acct_id', choices: ['187212085277', 'xxxx', 'yyyy'], description: 'target aws account id',)
        choice(name: 'aws_region', choices: ['us-east-1', 'us-east-2', 'yyyy'], description: 'target aws region',)
        string(name: 'ecrrepo_name', defaultValue: 'ews-demo-me', description: 'target aws ecr repo name',)
        string(name: 'image_tag', defaultValue: '', description: 'docker image build tag',)
        string(name: 'docker_username', defaultValue: '', description: 'enter your docker hub account userID',)
        password(name: 'docker_password', defaultValue: '', description: 'enter your docker account password',)
    }
    stages {
        stage('clone down dockerfile repo') {
            steps {                
                git branch: 'master',
                    credentialsId: 'github_jenkins',
                        url: 'https://github.com/oscarose/dockertest.git'
            }
        }
        stage('download files from s3') {
            steps {              
              sh """
              cd ${WORKSPACE}
              aws s3 cp s3://emekacicddemo/jenkins.war .
              aws s3 cp s3://emekacicddemo/apache-tomcat-8.5.57.tar.gz .
              aws s3 cp s3://emekacicddemo/jdk-8u231-linux-x64.tar.gz .
              """
           }
        }
        stage('build docker image and push to ecr repo') {
            steps {
                script {
                    wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[password: "${docker_password}", var: 'PSWD']]]) {
                        sh """
                        ansible-playbook $WORKSPACE/build_image.yaml --extra-vars "docker_username=${docker_username} docker_password=${docker_password} aws_acct_id=${aws_acct_id} ecrrepo_name=${ecrrepo_name} image_tag=${image_tag}" -vvv
                        """
                    }
                }
            }
        }
        stage('scan image and display result') {
            steps {
               sh """
               aws ecr put-image-scanning-configuration --repository-name ${ecrrepo_name} --image-scanning-configuration scanOnPush=true --region ${aws_region}
               aws ecr start-image-scan --repository-name ${ecrrepo_name} --image-id imageTag=${image_tag} --region ${aws_region}
               aws ecr describe-image-scan-findings --repository-name ${ecrrepo_name} --image-id imageTag=${image_tag} --region ${aws_region}
               """
            }
        }
    }
}
